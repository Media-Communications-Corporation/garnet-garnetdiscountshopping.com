pipeline {
    agent any
    stages {
        stage("No Build") {
            when {
                expression { return env.DEPLOY_TARGET == "NO_DEPLOY" }
            }
            steps {
                error "No valid deploy target selected."
            }
        }
        stage("Root Folder Build") {
            when {
                expression { return env.DEPLOY_TARGET == "ROOT_FOLDER" }
            }
            steps {
                echo "Deploying the root files and assets folder..."
                sh '''#!/bin/bash
                    ##
                    ## we are deploying the root files and the "assets" folder only
                    ## delete everything else
                    ##
                    for e in * ; do
                        if [ -d "$e" ]; then 
                            if [[ "$e" != "assets" ]]; then
                                rm -rf $e
                            fi
                        fi 
                    done
                '''
            }
        }
        stage("Full Site Build") {
            when {
                expression { return env.DEPLOY_TARGET == "FULL_SITE" }
            }
            steps {
                echo "Deploying the entire website..."
            }
        }
        stage("Offers Folder Build") {
            when {
                allOf {
                    expression { return env.DEPLOY_TARGET != "NO_DEPLOY" }
                    expression { return env.DEPLOY_TARGET != "ROOT_FOLDER" }
                    expression { return env.DEPLOY_TARGET != "FULL_SITE" }
                }
            }
            steps {
                echo "Deploying offer folder ${env.DEPLOY_TARGET} ..."
                sh '''#!/bin/bash
                    ## scan and delete all files and folders except the target folder
                    for e in * ; do
                        if [ -d "$e" ]; then 
                            ##
                            ## found a folder
                            ## if this is not our deploy target folder, delete it
                            ##
                            if [[ "$e" != "$DEPLOY_TARGET" ]]; then 
                                rm -rf $e
                            fi
                        else 
                            ## 
                            ## found a file
                            ## delete this file
                            ##
                            rm -f $e
                        fi
                    done
                '''
            }
        }
        stage("Deploy") {
            steps {
                echo "Deploying to ${env.DEPLOY_FOLDER} ..."
                sh '''#!/bin/bash
                    ##
                    ## Deploy whatever files and folders that remain in the workspace.
                    ## Make sure to setup environment variables in Jenkins to match the names here.
                    ##   $DEPLOY_USERHOST -- e.g. jonaxse@123.45.67.89
                    ##   $DEPLOY_FOLDER   -- e.g. /home/user/siteusername/htdocs/mywebsite.com/
                    ##
                    ## All the files in the deploy folder will be wiped clean before the build artifacts here are copied over.
                    ## Perform final cleanup of files here before uploading artifacts.
                    ##
                    echo "Removing unneccessary files that are not to be deployed live..."
                    rm -f Jenkinsfile
                    rm -f Jenkinsfile-dev
                    rm -f Jenkinsfile-live
                    rm -f .gitignore
                    rm -f package.json
                    rm -f package-lock.json
                    rm -f README.md
                    rm -rf .git/
                    rm -rf node_modules/
                    find -type f -name 'gulpfile.js' -exec rm -f {} +;

                    echo "Showing workspace content prior to deployment..."
                    ls -alh

                    if [[ "$DEPLOY_TARGET" == "FULL_SITE" ]]; then
                        echo "Cleaning up entire deployment folder: $DEPLOY_FOLDER/*"
                        ssh $DEPLOY_USERHOST "rm -rf $DEPLOY_FOLDER/*"
                    elif [[ "$DEPLOY_TARGET" == "ROOT_FOLDER" ]]; then
                        echo "Skipped: Not cleaning up deployment root folder"
                    else
                        echo "Cleaning up target offer folder: $DEPLOY_FOLDER/$DEPLOY_TARGET/*"
                        ssh $DEPLOY_USERHOST "rm -rf $DEPLOY_FOLDER/$DEPLOY_TARGET/*"
                    fi

                    echo "Copying over build artifacts to deployment folder..."
                    scp -r * $DEPLOY_USERHOST:$DEPLOY_FOLDER/

                    echo "All Done."
                '''
            }
        }
    }
    post {
        success {
            emailext attachLog: true, body: "The live site for garnetesmartmax.com has been rebuilt successfully with deploy target, $DEPLOY_TARGET", compressLog: true, subject: "Jenkins: Success - garnetesmartmax.com ($DEPLOY_TARGET)", to: "$DEPLOY_EMAIL"
        }
        failure {
            emailext attachLog: true, body: "The live site for garnetesmartmax.com has failed to rebuild with deploy target, $DEPLOY_TARGET", compressLog: true, subject: "Jenkins: Failed - garnetesmartmax.com ($DEPLOY_TARGET)", to: "$DEPLOY_EMAIL"
        }
    }
}