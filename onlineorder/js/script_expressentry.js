var exp_entry_global_url = "https://expressentry.melissadata.net/web/GlobalExpressFreeForm?id=f4hOmE545susi_wOHKsORa**&format=json&maxrecords=10", exp_entry_us_url = "https://expressentry.melissadata.net/web/ExpressFreeForm?id=f4hOmE545susi_wOHKsORa**&format=json&maxrecords=10", exp_entry_url = "", exp_ajax_req = new Object, exp_prev_val_len = new Object, json_mexico_states = {}, json_bahamas_states = {}, json_canada_states = {}, json_costa_rica_states = {}, json_spain_states = {}; function express_entry_start() { $.getJSON(location.protocol + "//" + location.host + "/onlineorder/js/json/mexico.json", (function (t) { json_mexico_states = t })).fail((function () { console.log("Error loading mexico.json.") })), $.getJSON(location.protocol + "//" + location.host + "/onlineorder/js/json/bahamas.json", (function (t) { json_bahamas_states = t })).fail((function () { console.log("Error loading bahamas.json.") })), $.getJSON(location.protocol + "//" + location.host + "/onlineorder/js/json/canada.json", (function (t) { json_canada_states = t })).fail((function () { console.log("Error loading canada.json.") })), $.getJSON(location.protocol + "//" + location.host + "/onlineorder/js/json/costa-rica.json", (function (t) { json_costa_rica_states = t })).fail((function () { console.log("Error loading costa-rica.json.") })), $.getJSON(location.protocol + "//" + location.host + "/onlineorder/js/json/spain.json", (function (t) { json_spain_states = t })).fail((function () { console.log("Error loading spain.json.") })), $("head").append('<link rel="stylesheet" href="' + location.protocol + "//" + location.host + '/onlineorder/css/express-entry.css" type="text/css" />'), ExpressEntry("#fields_address1", 5), ExpressEntry("#fields_address2", 2), ExpressEntry("#fields_city", 2) } function ShowSuggestion(t) { if ("" != $.trim($(t).attr("data-suggested"))) { var e = $(t).attr("id"); 0 == $(".control-" + e).length && $('<div class="autocomplete-express control-' + e + '"><ul></ul></div>').insertAfter($(t)); var s = 0; s = $.trim($(t).val()).length > $(t).attr("data-suggested").length ? $(t).attr("data-suggested").length : $.trim($(t).val()).length, $.trim($(t).val()).substr(0, s).toLowerCase() == $(t).attr("data-suggested").substr(0, s).toLowerCase() ? (0 == $(".control-" + e + " .autocomplete-suggest").length ? $(".control-" + e + " ul").prepend('<li class="autocomplete-suggest"><strong>Recommended:</strong><br/><span>' + $(t).attr("data-suggested") + "</span></li>") : $(".control-" + e + " .autocomplete-suggest span").text($(t).attr("data-suggested")), $(".control-" + e + " .autocomplete-suggest").attr("data-suggested", $(t).attr("data-suggested")), $(".control-" + e).slideDown(), $(".control-" + e + " .autocomplete-suggest").unbind("click"), $(".control-" + e + " .autocomplete-suggest").bind("click", (function () { $(t).val($(this).find("span").text()), $(".control-" + e).fadeOut() }))) : $(".control-" + e + " .autocomplete-suggest").remove() } } function isDuplicate(t, e) { var s = !1; return t.length > 0 && $.each(t, (function (a, i) { t.address1 == e.address1 && t.address2 == e.address2 && "" != t.address2 && "" != e.address2 && t.city == e.city && t.state == e.state && t.zip == e.zip && t.country == e.country && (s = !0) })), s } function FindState(t, e) { var s = {}; return $(t).length > 0 && $(t + " > option").each((function (t) { $.trim($(this).val().toLowerCase()) == $.trim(e.toLowerCase()) && (s.state = $(this).val(), s.stateName = $(this).text()) })), s } function FindStateJSON(t, e, s, a) { var i = {}; switch (e.toLowerCase()) { case "mex": $.each(json_mexico_states, (function (t, e) { e.code.toLowerCase() == a.toLowerCase() && (i.state = e.code, i.stateName = e.name) })); break; case "bhs": $.each(json_bahamas_states, (function (t, e) { e.code.toLowerCase() == a.toLowerCase() && (i.state = e.code, i.stateName = e.name) })); break; case "can": $.each(json_canada_states, (function (t, e) { e.code.toLowerCase() == a.toLowerCase() && (i.state = e.code, i.stateName = e.name) })); break; case "cri": $.each(json_costa_rica_states, (function (t, e) { e.code.toLowerCase() == a.toLowerCase() && (i.state = e.code, i.stateName = e.name) })); break; case "gum": i.state = "GU", i.stateName = "Guam" }return i.hasOwnProperty("state") && $(t).length > 0 && $(t + " > option").each((function (t) { $.trim($(this).text().toLowerCase()) == $.trim(i.stateName.toLowerCase()) && (i.state = $(this).val(), i.stateName = $(this).text()) })), i } function ExpressEntry(t, e, s) { $(t).length > 0 && ($(t).attr("autocomplete", "off"), $(t).bind("keyup propertychange paste", (function (a) { var i = {}; exp_entry_url = exp_entry_global_url, "paste" == a.type ? (i.type = $(this).attr("id"), i.value = $.trim(a.originalEvent.clipboardData.getData("text"))) : (i.type = $(this).attr("id"), i.value = $.trim($(this).val())); var r = {}; if ($(t).val().length < e && "paste" != a.type) return $(".control-" + i.type + " .autocomplete-item").length > 0 && $(".control-" + i.type + " .autocomplete-item").remove(), !1; var l = "&ff="; if (0 == $(".control-" + i.type).length) { var o = $(t).css("float"), d = $("#fields_address1").width(), n = parseInt($("#fields_address1").css("padding-right")), c = parseInt($("#fields_address1").css("padding-left")); $('<div class="autocomplete-express control-' + i.type + '"><ul></ul></div>').insertAfter($(this)).promise().done((function () { $(".control-" + i.type).parent().css("position", "relative"), $(".control-" + i.type + " ul").css({ width: d + n + c + 2, float: o }), "none" != o && $(".control-" + i.type + " ul").css({ top: "11px" }) })) } if (0 == e && "" != i.value || i.value.length >= e && "" != i.value) { if (exp_prev_val_len[i.type] = i.value.length, 1 == $.active && void 0 !== exp_ajax_req[i.type] && (exp_ajax_req[i.type].abort(), "abort" == exp_ajax_req[i.type].statusText && (console.log("aborted"), $(".control-" + i.type + " .autocomplete-loader").remove())), $(".control-" + i.type + " .autocomplete-item").length > 0 && $(".control-" + i.type + " .autocomplete-item").remove(), 0 == $(".control-" + i.type + " .autocomplete-loader").length && $(".control-" + i.type + " ul").append('<li class="autocomplete-loader"><span>Loading suggestions...</span></li>'), ShowSuggestion(t), $(".control-" + i.type).slideDown(), "" != $.trim($("#fields_address1").val()) && (i.address = $.trim($("#fields_address1").val())), "" != $.trim($("#fields_address2").val()) && (i.apt = $.trim($("#fields_address2").val())), "" != $.trim($("#fields_city").val()) && (i.city = $.trim($("#fields_city").val())), "" != $.trim($("#fields_state").val()) && (i.state = $.trim($("#fields_state").val())), "" != $.trim($("#fields_zip").val()) && (i.zip = $.trim($("#fields_zip").val())), "" != $.trim($("#fields_country_select").val()) && (i.country = $.trim($("#fields_country_select").val())), "paste" == a.type) switch (i.type) { case "fields_address1": i.address = i.value; break; case "fields_address2": i.apt = i.value; break; case "fields_city": i.city = i.value }$("input[type=text], body").bind("click", (function () { var t = $(this).attr("id"); for (var e in $(".autocomplete-express").not(".control-" + t).hide(), exp_ajax_req) exp_ajax_req.hasOwnProperty(e) && e != t && exp_ajax_req[e].abort() })), $("#" + i.type).bind("click", (function () { var t = $(this).attr("id"), e = $.trim($(this).val()); for (var s in $(".autocomplete-express").not(".control-" + t).hide(), exp_ajax_req) exp_ajax_req.hasOwnProperty(s) && s != t && exp_ajax_req[s].abort(); 0 == e.length && $(".control-" + i.type + " .autocomplete-item").length > 0 && $(".control-" + i.type + " .autocomplete-item").remove(), $(".control-" + t + " .autocomplete-item").length > 0 && e.length > 0 && $(".autocomplete-express.control-" + t).slideDown() })), i.hasOwnProperty("address") && "" != $.trim(i.address) && (l += $.trim(i.address) + " "), i.hasOwnProperty("apt") && "" != $.trim(i.apt) && (l += $.trim(i.apt) + " "), i.hasOwnProperty("city") && "" != $.trim(i.city) && (l += $.trim(i.city) + " "), i.hasOwnProperty("state") && "" != $.trim(i.state) && (l += $.trim(i.state) + " "), i.hasOwnProperty("zip") && "" != $.trim(i.zip) && (l += $.trim(i.zip) + " "), i.hasOwnProperty("country") && ("us" == i.country.toLowerCase() || "usa" == i.country.toLowerCase() ? (exp_entry_url = exp_entry_us_url, r.country = "usa") : (l = $.trim(l) + "&country=" + $.trim(i.country) + " ", r.country = i.country.toLowerCase())), exp_ajax_req[i.type] = $.ajax({ url: exp_entry_url, data: $.trim(l), type: "GET", dataType: "json", cache: !1 }), exp_ajax_req[i.type].done((function (t) { if (t.hasOwnProperty("ResultCode")) { if ("XS03" != t.ResultCode) { $(".control-" + i.type + " .autocomplete-loader").remove(); var e = []; $.each(t.Results, (function (s, a) { var i = {}; "usa" == r.country ? (i.address1 = $.trim(t.Results[s].Address.AddressLine1), i.address2 = $.trim(t.Results[s].Address.SuiteName), i.city = $.trim(t.Results[s].Address.City), i.zip = $.trim(t.Results[s].Address.PostalCode), i.state = $.trim(t.Results[s].Address.State), i.stateAlternate = $.trim(t.Results[s].Address.CountrySubdivisionCode), i.countryISO3 = "USA", i.countryISO2 = "US") : (i.address2 = "", i.city = "", i.state = "", i.address1 = $.trim(t.Results[s].Address.Address1), "" != $.trim(t.Results[s].Address.CityAccepted) && (i.address2 = $.trim(t.Results[s].Address.Locality)), "" != $.trim(t.Results[s].Address.CityAccepted) ? i.city = $.trim(t.Results[s].Address.CityAccepted) : "" != $.trim(t.Results[s].Address.Locality) && (i.city = $.trim(t.Results[s].Address.Locality)), i.zip = $.trim(t.Results[s].Address.PostalCodePrimary), "" != t.Results[s].Address.AdministrativeArea && (i.state = $.trim(t.Results[s].Address.AdministrativeArea), i.stateAlternate = $.trim(t.Results[s].Address.CountrySubdivisionCode)), i.countryISO3 = $.trim(t.Results[s].Address.ISO3166_3), i.countryISO2 = $.trim(t.Results[s].Address.ISO3166_2)), isDuplicate(e, i) || e.push(i) })), $.each(e, (function (t, e) { var s = "", a = "", l = {}; r.address1 = e.address1, r.address2 = e.address2, r.city = e.city, r.zip = e.zip, r.state = e.state, r.countryISO3 = e.countryISO3, r.countryISO2 = e.countryISO2, r.stateAlternate = e.stateAlternate, r.stateRaw = e.state, r.stateName = e.state; switch ($("#fields_state").length > 0 && ((l = FindState("#fields_state", r.state)).hasOwnProperty("state") ? (r.state = l.state, r.stateName = l.stateName) : "usa" != r.countryISO3.toLowerCase() ? (l = FindStateJSON("#fields_state", r.countryISO3, r.state, r.stateAlternate)).hasOwnProperty("state") && (r.state = l.state, r.stateName = l.stateName) : console.log("cannot find state name for " + r.state)), i.type) { case "fields_address12": case "fields_address1_bill": case "fields_address1": s = r.address1; break; case "fields_address22": case "fields_address2_bill": case "fields_address2": s = r.address2; break; case "fields_city2": case "fields_city_bill": case "fields_city": s = r.city; break; case "fields_zip2": case "fields_zip_bill": case "fields_zip": s = r.zip }"" != r.address1 && (a = "fields_address1" == i.type || "fields_address12" == i.type || "fields_address1_bill" == i.type ? "&nbsp;<strong>" + r.address1 + "</strong>" : "&nbsp;" + r.address1), "" != $.trim(r.address2) && (a += '&nbsp;<span class="express-apt">' + r.address2 + "</span>"), "" != $.trim(r.city) && ("fields_city" == i.type || "fields_city2" == i.type || "fields_city_bill" == i.type ? a += "&nbsp;<strong>" + r.city + "</strong>" : a += "&nbsp;" + r.city), "" != r.zip && ("fields_zip" == i.type ? a += '&nbsp;<strong><span class="express-zip">' + r.zip + "</span></strong>" : a += '&nbsp;<span class="express-zip">' + r.zip + "</span>"), "" != r.state && (a += "&nbsp;" + r.stateName), "" != r.countryISO3 && (a += "&nbsp;" + r.countryISO3), s += '<div class="autocomplete-details">' + a + "</div>", $(".control-" + i.type + " ul").append('<li class="autocomplete-item" data-address="' + r.address1 + '" data-apt="' + r.address2 + '" data-city="' + r.city + '" data-state="' + r.state + '" data-stateraw="' + r.stateRaw + '" data-statealt="' + r.stateAlternate + '" data-zip="' + r.zip + '" data-countryiso2="' + r.countryISO2 + '" data-countryiso3="' + r.countryISO3 + '">' + s + "</li>") })) } else $(".control-" + i.type + " .autocomplete-loader").text("No suggestions found.").delay(1e3).slideUp(500, (function () { $(".control-" + i.type + " .autocomplete-loader").delay(1e4).remove() })); $(".control-" + i.type + " .autocomplete-item").unbind("click"), $(".control-" + i.type + " .autocomplete-item").bind("click", (function (t) { i.type.indexOf("_bill") > -1 ? (-1 == i.type.indexOf("_zip") && ("" != $.trim($(this).attr("data-address")) && $("#fields_address1_bill").val($(this).attr("data-address")), $("#fields_address1_bill").attr("data-suggested", $(this).attr("data-address")), $("#fields_address2_bill").val($(this).attr("data-apt")), $("#fields_address2_bill").attr("data-suggested", $(this).attr("data-apt"))), "" != $.trim($(this).attr("data-city")) && $("#fields_city_bill").val($(this).attr("data-city")), $("#fields_city_bill").attr("data-suggested", $(this).attr("data-city")), "" != $.trim($(this).attr("data-state")) && ($("#fields_state_bill").val($(this).attr("data-state")), $("#fields_state_bill option[value=" + $.trim($(this).attr("data-state")) + "]").attr("selected", "selected"), "" == $.trim($("#fields_state_bill").val()) && $("#fields_state_bill").prop("selectedIndex", 0).val()), $("#fields_state_bill").attr("data-suggested", $(this).attr("data-state")), $("#fields_zip_bill").val($(this).attr("data-zip")), $("#fields_zip_bill").attr("data-suggested", $(this).attr("data-zip")), $("#fields_zip_bill").rules("remove", "validZipcode"), $("#fields_zip_bill").attr("maxlength", $("#fields_zip_bill").val().length), $("#fields_zip_bill").rules("add", { maxlength: $("#fields_zip_bill").val().length }), "undefined" != typeof ExpEntrZip_Key && ExpEntrZip_Key("#fields_zip_bill"), $("#fields_address1_bill, #fields_address2_bill, #fields_city_bill, #fields_state_bill, #fields_zip_bill").valid(), "" != $.trim($(this).attr("data-countryiso2")) && ($("#fields_country_select_bill, #fields_country_select_bill2").val($.trim($(this).attr("data-countryiso2"))), $("#fields_country_select_bill option[value=" + $.trim($(this).attr("data-countryiso2")) + "]").attr("selected", "selected"), $("#fields_country_select_bill2 option[value=" + $.trim($(this).attr("data-countryiso2")) + "]").attr("selected", "selected")), "" != $.trim($(this).attr("data-countryiso2")) && ($("#fields_country_select_bill, #fields_country_select_bill2").val($.trim($(this).attr("data-countryiso2"))), $("#fields_country_select_bill option[value=" + $.trim($(this).attr("data-countryiso2")) + "]").attr("selected", "selected"), $("#fields_country_select_bill2 option[value=" + $.trim($(this).attr("data-countryiso2")) + "]").attr("selected", "selected"), "" == $.trim($("#fields_country_select_bill").val()) ? "" != $.trim($(this).attr("data-countryiso3")) && ($("#fields_country_select_bill, #fields_country_select_bill2").val($.trim($(this).attr("data-countryiso3"))), $("#fields_country_select_bill option[value=" + $.trim($(this).attr("data-countryiso3")) + "]").attr("selected", "selected"), $("#fields_country_select_bill2 option[value=" + $.trim($(this).attr("data-countryiso3")) + "]").attr("selected", "selected"), $("#fields_country_select_bill").trigger("change")) : $("#fields_country_select_bill").trigger("change"))) : (-1 == i.type.indexOf("_zip") && ("" != $.trim($(this).attr("data-address")) && $("#fields_address1, #fields_address12").val($(this).attr("data-address")), $("#fields_address1, #fields_address12").attr("data-suggested", $(this).attr("data-address")), $("#fields_address2, #fields_address22").val($(this).attr("data-apt")), $("#fields_address2, #fields_address22").attr("data-suggested", $(this).attr("data-apt"))), "" != $.trim($(this).attr("data-city")) && $("#fields_city, #fields_city2").val($(this).attr("data-city")), $("#fields_city, #fields_city2").attr("data-suggested", $(this).attr("data-city")), "" != $.trim($(this).attr("data-countryiso2")) && ($("#fields_country_select, #fields_country_select2").val($.trim($(this).attr("data-countryiso2"))), $("#fields_country_select option[value=" + $.trim($(this).attr("data-countryiso2")) + "]").attr("selected", "selected"), $("#fields_country_select2 option[value=" + $.trim($(this).attr("data-countryiso2")) + "]").attr("selected", "selected"), "" == $.trim($("#fields_country_select").val()) ? "" != $.trim($(this).attr("data-countryiso3")) && ($("#fields_country_select, #fields_country_select2").val($.trim($(this).attr("data-countryiso3"))), $("#fields_country_select option[value=" + $.trim($(this).attr("data-countryiso3")) + "]").attr("selected", "selected"), $("#fields_country_select2 option[value=" + $.trim($(this).attr("data-countryiso3")) + "]").attr("selected", "selected"), $("#fields_country_select").trigger("change")) : ($("#fields_country_select").trigger("change"), $("#fields_country_select").focus())), "" != $.trim($(this).attr("data-state")) && ($("#fields_state, #fields_state2").val($(this).attr("data-state")), $("#fields_state option[value=" + $.trim($(this).attr("data-state")) + "]").attr("selected", "selected"), "" == $.trim($("#fields_state").val()) && $("#fields_state").prop("selectedIndex", 0).val(), "" == $.trim($("#fields_state2").val()) && $("#fields_state2").prop("selectedIndex", 0).val()), $("#fields_state, #fields_state2").attr("data-suggested", $(this).attr("data-state")), $("#fields_zip, #fields_zip2").val($(this).attr("data-zip").trim()), $("#fields_zip, #fields_zip2, #fields_zip_bill").rules("remove", "validZipcode"), $("#fields_zip, #fields_zip2, #fields_zip_bill").attr("maxlength", $("#fields_zip").val().length), $("#fields_zip, #fields_zip2, #fields_zip_bill").rules("add", { maxlength: $("#fields_zip").val().length }), "undefined" != typeof ExpEntrZip_Key && ExpEntrZip_Key("#fields_zip"), $("#fields_address1, #fields_address2, #fields_city, #fields_state, #fields_zip").valid()), $(".control-" + i.type).fadeOut() })), "undefined" != typeof TriggerChange && TriggerChange("fields_address1", "fields_address12") } else $(".control-" + i.type + " .autocomplete-loader").text("No suggestions found.").delay(1e3).slideUp(500, (function () { $(".control-" + i.type + " .autocomplete-loader").delay(1e4).remove() })); "function" == typeof s && s(t) })) } }))) } $(document).ready((function () { express_entry_start() }));